@model TicketManagement.Models.tblticket

@{
    ViewBag.Title = "Create";
}
<br />
<br />
<br />
<br />
<h2>Create Ticket</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <div class="form-horizontal">

        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group input-group mb-3">

            @Html.LabelFor(model => model.TicketNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10" style="display:none">
                @Html.EditorFor(model => model.TicketNumber, new { htmlAttributes = new { @class = "form-control", @Value = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss ") } })
            </div>
            <div class="col-md-10">
                <p id="p1">  </p>
                <p id="p2">  </p>
                <script>

                    var today = new Date();

                    var date = today.getFullYear() + '/' + (today.getMonth() + 1) + '/' + today.getDate();

                    var time = today.getHours() + ":" + today.getMinutes() + ":" + today.getSeconds();

                    var dateTime = date + ' ' + time;
                    document.getElementById("p1").innerHTML = dateTime;
                </script>
            </div>

            @Html.ValidationMessageFor(model => model.TicketNumber, "", new { @class = "text-danger" })
        </div>

        <div class="form-group input-group mb-3">
            @Html.LabelFor(model => model.Problem, htmlAttributes: new { @class = "control-label col-md-2" })

            <div class="col-md-10 ">

                @Html.DropDownList("Problem", new List<SelectListItem>
        {
          new SelectListItem { Text = "Select Problem" ,Value = "", Selected=true},
          new SelectListItem { Text = "Hardware" ,Value = "Hardware"},
          new SelectListItem { Text = "Software" ,Value = "Software"},
          new SelectListItem { Text = "Connection" ,Value = "Connection"},
          }, new { @class = "form-control" })

                @Html.ValidationMessageFor(model => model.Problem, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group input-group mb-3">
            @Html.LabelFor(model => model.Details, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Details, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Details, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group input-group mb-3">
            @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-2" })

            <div class="col-md-10 " style="display:none">

                @Html.DropDownList("Status", new List<SelectListItem>
         {
           new SelectListItem { Text = "Pending" ,@Value = "Pending"},
           }, new { @class = "form-control" })
            </div>

            <div class="col-md-10 ">

                @Html.DropDownList("displaystatus", new List<SelectListItem>
        {
          new SelectListItem { Text = "Pending" ,Value = "Pending", Selected=true},
          }, new { @class = "form-control", disabled = "disabled" })

                @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group input-group mb-3">
            @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control", @Value = DateTime.Now.ToString("yyyy-MM-dd"), @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group input-group mb-3">
            @Html.LabelFor(model => model.Time, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                @Html.EditorFor(model => model.Time, new { htmlAttributes = new { @class = "form-control", @Value = DateTime.Now.ToString("HH:mm:ss tt"), @readonly = "readonly" } })

                @Html.ValidationMessageFor(model => model.Time, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group input-group mb-3">
            @Html.LabelFor(model => model.CreatedBy, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CreatedBy, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.CreatedBy, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group input-group mb-3 ">
            @Html.LabelFor(model => model.AssignedTo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.AssignedTo, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.AssignedTo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group input-group mb-3">
            @Html.LabelFor(model => model.ApprovedBy, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ApprovedBy, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.ApprovedBy, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <div class="d-grid gap-2 d-md-flex justify-content-md-end">
        <div class="col-md-10">
            <button type="submit" id="btnAlertMessage" class="btn btn-success" value="Create" data-toggle="modal" data-target="">
                Create
            </button>
            <input type="button" value="Cancel" class="btn btn-warning" onclick="window.open('https://localhost:44343/Tickets/','resizable=yes')" />
        </div>
    </div>

}

@*<div>
        @Html.ActionLink("Back to List", "Index")
    </div>*@

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}